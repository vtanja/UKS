version: '3.9'

services:
  db:
    restart: always
    image: postgres
    container_name: uks_db
    volumes:
    - ./pgdata:/var/lib/posgresql/data
    ports:
    - "8001:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}

  web:
    container_name: uks_web
    build: .
    command: ["./wait_for_postgres.sh"]
    expose:
      - 8000
    volumes:
      - ./static:/uks/static
    logging:
      driver: "json-file"
    depends_on:
      - db
      - es
      - kibana
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG_MODE=${DEBUG_MODE}
      - GIT_TOKEN=${GIT_TOKEN}

  nginx:
    image: nginx
    container_name: uks_nginx
    ports:
      - "8000:8000"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./static:/uks/static
    depends_on:
      - web

  # ELK stack for logging
  es:
    labels:
      com.example.service: "es"
      com.example.description: "For searching and indexing data"
    image: elasticsearch:5.4
    container_name: uks_es
    volumes:
      - ./esdata:/usr/share/elasticsearch/data/
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  kibana:
    labels:
      com.example.service: "kibana"
      com.example.description: "Data visualisation and for log aggregation"
    image: kibana:5.4.3
    container_name: uks_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://es:9200
    depends_on:
      - es

  logstash:
    labels:
      com.example.service: "logstash"
      com.example.description: "For logging data"
    image: logstash:5.4.3
    container_name: uks_logstash
    volumes:
      - ./config/logstash:/logstash_dir
    command: logstash -f /logstash_dir/logstash.conf
    depends_on:
      - es
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    ports:
      - "5959:5959"

# redis as a Django cache store
  redis:
    image: redis
    container_name: uks_redis
    expose:
      - '6379'

# TICK stack for metrics and grafana for visualisation
  influxdb:
    container_name: uks_influxdb
    image: influxdb:1.0.2
    ports:
      - "8083:8083"
      - "8086:8086"
    volumes:
      - ./influxdb:/var/lib/influxdb
    restart: always

  grafana:
    container_name: uks_grafana
    image: grafana/grafana:4.3.2
    ports:
      - "3000:3000"
    links:
      - influxdb
    restart: always

  telegraf:
    container_name: uks_telegraf
    image: telegraf:1.3.3
    volumes:
      - ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
